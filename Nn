#include <iostream>
#include <vector>

using namespace std;


class Graph {
public:
    vector<vector<int>> graph;
    vector<bool> visited;
    vector<int> match;
    int n, m;

    explicit Graph(int N, int M) {
        n = N, m = M;
        graph.resize(n);
        visited.resize(n, false);
        match.resize(m, -1);
    }

    void fill_graph(int x, int y) {
        graph[y].push_back(x);
    }

    bool Kuhn(int now) {
        if (visited[now])
            return false;
        visited[now] = true;
        for (int v : graph[now]) {
            if (match[v] == -1 || Kuhn(match[v])) {
                match[v] = now;
                return true;
            }
        }
        return false;
    }
};


int main() {
    int n, m;
    cin >> n >> m;
    Graph grph(n, m);
    for (int i = 0; i < n; ++i) {
        int x;
        cin >> x;
        while (x != 0) {
            grph.fill_graph(x - 1, i);
            cin >> x;
        }
    }

    for (int i = 0; i < n; ++i) {
        grph.visited.assign(n, false);
        grph.Kuhn(i);
    }

    cout << grph.match.size() - count(grph.match.begin(), grph.match.end(), -1) << endl;

    for (int i = 0; i < m; ++i) {
        if (grph.match[i] != -1) {
            cout << grph.match[i] + 1 << ' ' << i + 1 << endl;
        }
    }

}
