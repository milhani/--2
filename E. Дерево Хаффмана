#include <algorithm>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

class Node {
public:
    string key;
    Node* l;
    Node* r;
    Node* prev;
    vector<string> ls;

    Node() {
        key = "";
        l = r = prev = nullptr;
    }
    Node(string new_key, Node *&par) {
        key = new_key;
        l = r = nullptr;
        prev = par;
    }
};

class Tree {
public:
    Node* root;
    Tree() : root(nullptr){
    }

    void built(Node *&tree, string com) {
        if (tree == nullptr) {
            tree = new Node();
        }
        for (char let : com) {
            if (let == 'D') {
                if (tree->l == nullptr) {
                    tree->l = new Node(tree->key + "0", tree);
                    built(tree->l, com.substr(1, com.size() - 1));
                    return;
                } else {
                    tree->r = new Node(tree->key + "1", tree);
                    built(tree->r, com.substr(1, com.size() - 1));
                    return;
                }
            } else {
                if (tree == tree->prev->l) {
                    if (tree->prev->r == nullptr) {
                        tree->prev->r = new Node(tree->prev->key + "1", tree->prev);
                    }
                    built(tree->prev->r, com.substr(1, com.size() - 1));
                    return;
                } else {
                    built(tree->prev, com);
                    return;
                }
            }
        }
    }

    vector<string> leaves(Node *&tree, vector<string>& arr) {
        if (tree != nullptr) {
            leaves(tree->l, arr);
            if (tree->l == nullptr && tree->r == nullptr) {
                arr.push_back(tree->key);
            }
            leaves(tree->r, arr);
        }
        return arr;
    }
};


int main() {
    int n;
    cin >> n;
    string str;
    for (int i = 0; i < n; ++i) {
        cin >> str;
        {
            Tree tree;
            tree.built(tree.root, str);
            vector<string> lst;
            vector<string> ans = tree.leaves(tree.root, lst);
            cout << ans.size() << endl;
            for (string &s : ans)
                cout << s << endl;
        }
    }
}
